# 🛒 Retail Sales Analysis using SQL

This project is a **SQL-based case study** designed to analyze retail sales data and extract meaningful business insights. The dataset simulates transaction-level data from a retail store, and all the queries have been written independently as part of my learning journey.

---

## 📌 Objectives

- Create and structure a relational database to store retail sales data.
- Clean the data to remove null or inconsistent entries.
- Perform exploratory and business-focused analysis using SQL.
- Generate insights related to customer behavior, sales trends, and product categories.

---

## 🧾 Dataset Overview

The dataset contains the following fields:

- `transactions_id` (Primary Key)  
- `sale_date`  
- `sale_time`  
- `customer_id`  
- `gender`  
- `age`  
- `category` (Product category)  
- `quantity`  
- `price_per_unit`  
- `cogs` (Cost of goods sold)  
- `total_sale`

---

## 🛠️ SQL Tasks Performed

### ✅ Database and Table Creation

- Created a database named `01_Case_Study`.
- Defined a structured schema with appropriate data types and constraints.

### 🧹 Data Cleaning

- Checked for null or missing values.
- Removed records with incomplete data to ensure accuracy in analysis.

### 🔍 Exploratory Analysis

- Total sales and number of transactions
- Count of unique customers and product categories
- Daily sales breakdown and specific date filtering

### 📊 Business-Focused Analysis

- Sales by category
- Average age of customers by category
- High-value transactions (sales > 1000)
- Gender-wise transactions by category
- Top 5 customers based on total sales
- Number of unique customers per category
- Time-of-day sales trend (Morning, Afternoon, Evening)

---

## 📄 SQL Code

```sql
-- SQL Retail Sales Analysis

-- Create database
Create database 01_Case_Study;

-- Create Table
DROP TABLE IF EXISTS retail_Sales;

CREATE TABLE retail_sales (
    transactions_id   INT PRIMARY KEY,
    sale_date         DATE,
    sale_time         TIME,
    customer_id       INT,
    gender            VARCHAR(15),
    age               INT,
    category          VARCHAR(15),
    quantity          INT,
    price_per_unit    FLOAT,
    cogs              FLOAT,
    total_sale        FLOAT
);  

-- Checking Inserted Data
SELECT * FROM retail_sales;
SELECT COUNT(*) FROM retail_sales;

-- Checking Null Values
SELECT * FROM retail_sales
WHERE transactions_id IS NULL
   OR sale_date IS NULL
   OR sale_time IS NULL
   OR gender IS NULL
   OR age IS NULL
   OR category IS NULL
   OR quantity IS NULL
   OR price_per_unit IS NULL
   OR cogs IS NULL
   OR total_sale IS NULL;

-- Removing Null Values
DELETE FROM retail_sales
WHERE quantity IS NULL
   OR price_per_unit IS NULL
   OR cogs IS NULL
   OR total_sale IS NULL;

-- Data Exploration
SELECT COUNT(*) FROM retail_sales; 
SELECT COUNT(DISTINCT customer_id) AS total_customers FROM retail_sales;
SELECT COUNT(DISTINCT category) AS Categories FROM retail_sales;

-- Data Analysis

--01.Write a SQL query to retrieve all columns for sales made on '2022-11-05:
select * from retail_sales;

select * from retail_sales
where sale_date = '2022-11-05';

--02.Write a SQL query to retrieve all transactions where the category is 'Clothing' and the quantity sold is more than 4 in the month of Nov-2022:

select * from retail_sales
where category = 'Clothing' 
and to_char(sale_date,'YYYY-MM')='2022-11'
and quantity >= 4 
;

--03.Write a SQL query to calculate the total sales (total_sale) for each category.:
select category , sum(total_sale) as total_sales
from retail_sales
group by category;

--04.Write a SQL query to find the average age of customers who purchased items from the 'Beauty' category.:
select round(avg(age),2) as average_age  from retail_sales
where category = 'Beauty' ; 

--05.Write a SQL query to find all transactions where the total_sale is greater than 1000.:

select * from retail_sales
where total_sale > 1000 ;

--06.Write a SQL query to find the total number of transactions (transaction_id) made by each gender in each category.:

select category,gender,count(transactions_id)
from retail_sales 
group by 1,2
order by 1 ;


--07.**Write a SQL query to find the top 5 customers based on the highest total sales **:

select customer_id,
sum(total_sale) as total_sales 
from retail_sales
group by 1
order by 2 desc 
limit 5 ;

--08.Write a SQL query to find the number of unique customers who purchased items from each category.:

select category, count( distinct customer_id) as unique_customers
from retail_sales
group by category;

--9.Write a SQL query to create each shift and number of orders (Example Morning <12, Afternoon Between 12 & 17, Evening >17):
select * from retail_sales ;

with hourly_sale
as
(
select *,
	case
	   when extract (hour from sale_time ) < 12 then 'Morning'
	   when extract (hour from sale_time ) between 12 and 17 then 'Afternoon'
	   else 'Evening'
	end as shift 
from retail_sales
) select 
shift,
count(*) as total_orders
from hourly_sale
group by shift ; 
 
